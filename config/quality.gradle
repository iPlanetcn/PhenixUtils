apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

// Add checkstyle, findbugs, pmd and lint to the check task.
dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:8.1'
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
}

pmd {
    toolVersion = '5.8.1'
}

def configDir = "${project.rootDir}/config/quality"
def reportsDir = "${project.buildDir}/reports"

check.dependsOn 'checkstyle', /*'findbugs',*/ 'pmd', 'lint'

task checkstyle(type: Checkstyle, group: 'Verification', description: 'Runs code style checks') {
    configFile file("$configDir/checkstyle/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

//task findbugs(type: FindBugs, group: 'Verification', description: 'Inspect java bytecode for bugs',
//        dependsOn: ['compileDebugSources', 'compileReleaseSources']) {
//
//    ignoreFailures = true
//    effort = "max"
//    reportLevel = "high"
//    excludeFilter = new File("$configDir/findbugs/findbugs-filter.xml")
//    classes = files("$project.rootDir/app/build/intermediates/classes")
//
//    source 'src'
//    include '**/*.java'
//    exclude '**/gen/**'
//
//    reports {
//        xml.enabled = false
//        html.enabled = true
//        xml {
//            destination file("$reportsDir/findbugs/findbugs.xml")
//        }
//        html {
//            destination file("$reportsDir/findbugs/findbugs.html")
//        }
//    }
//
//    classpath = files()
//}

task pmd(type: Pmd, group: 'Verification', description: 'Inspect sourcecode for bugs') {
    ignoreFailures = false
    ruleSetFiles = files("$configDir/pmd/pmd-ruleset.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination file("$reportsDir/pmd/pmd.xml")
        }
        html {
            destination file("$reportsDir/pmd/pmd.html")
        }
    }
}

android {
    lintOptions {
        abortOnError true
        xmlReport false
        htmlReport true
        lintConfig file("$configDir/lint/lint.xml")
        htmlOutput file("$reportsDir/lint/lint-result.html")
        xmlOutput file("$reportsDir/lint/lint-result.xml")
    }
}

task detectInfer(type: Exec) {
    commandLine 'command'
    args = ['-v', 'infer']

    // Hide output if infer is present
    standardOutput new ByteArrayOutputStream()

    // Inform user if infer not present
    ignoreExitValue true
    doLast {
        if (execResult.getExitValue() != 0) {
            throw new GradleException("Infer seems not installed. Please refer to http://fbinfer.com/docs/getting-started.html")
        }
    }
}

task infer(type: Exec, dependsOn: [clean, detectInfer]) {
    workingDir "${project.rootDir}"
    commandLine 'infer'
    args = ['--', './gradlew', 'build']
}